#!/usr/bin/env python
DEBUG=False
import sys
import gzip
import glob
import os
import matplotlib
#--- removes Xwindows backend dependency  (Has to be tested with freeze)
matplotlib.use('Agg')

#import pylab, matplotlib
import pylab
import numpy as np

import popgen
import fileReader
import regionClassifier
import supportConfig

### TRYING SCIPY COMPILE WORKAROUND
#---  SCIPY cxFreeze dependency fixes
import scipy.misc
import scipy
scipy.factorial = scipy.misc.factorial

from scipy import factorial
import scipy.signal

#---  matplotlib cxFreeze dependency fixes
import matplotlib.backends.backend_tkagg
####################################

def winSizeBPandCM(results, winSize):
    """Calculates the average window size in bp and cM"""
    bpLengths=[]; cmLengths=[]
    for result in results:
        snpLocations=result[2]
        mapLocations=result[3]
        winStarts=[0]; winStarts.extend(snpLocations[::winSize])
        mapStarts=[0]; mapStarts.extend(mapLocations[::winSize])
        bpLengths.extend(np.diff(winStarts))
        cmLengths.extend(np.diff(mapStarts))
    return bpLengths, cmLengths

def openFiles(params):
    """Open files and return return concurrentFileReader object along with subjects.
    Handles the possibility of both tped files and tfam files

    Arguments:
    - `params`: dictionary of settings
    Returns:
    - `subjects` - list of list of subjects
    - `files` - concurrentFileReader object
    """
    files=params['fileNames']
    if params['isBeagle']:
        files=fileReader.concurrentFileReader(*files, nHeaders=1, key=1, nLabels=2)
        subjects=files.next()[0]
        return subjects, files
    else:
        tfams=[f.replace('.tped', '.tfam') for f in files]
        tfams=[fileReader.openfile(f) for f in tfams]
        subjects=[]
        for f in tfams:
            subs=[[l.split(None, 2)[1]+'_a',l.split(None, 2)[1]+'_b']  for l in f]
            subjects.append(np.asarray(sum(subs, [])))
        files=fileReader.concurrentFileReader(*files, nHeaders=0, key=[0,1], nLabels=4)
        return subjects, files


def runSVM(params, chrom,  svmC=100):
    """Deconvolves ancestry in files listed in params object for one chromosome

    Returns:
    - `subjects`: list of subject names in admixed sample
    - `snpNames`: list of snpIds    
    - `snpLocations`: list of positions in bp
    - `mapLocations`: list of positions cM
    - `admixedClassPre`: classification of admixed samples before hmm filter
    - `admixedClass`:    classification of admixed samples after hmm filter
    - `p`: posterior probability of ancestry assignments
    - `chrom`: chromosome name analyzed
    """
    nGens=params['nGens']
    winSize=params['win']

    snpNames=[]
    snpLocations=[]     #stores physical location from files
    mapLocations=[]     #stores gentetic map location from files
    ancestralSuccess=[] #stores success of ancestral classification
    admixedClass=[]     #stores classification of test Subjects
    subjects, files=openFiles(params)
    classifier=regionClassifier.SVMpymvpa(C=svmC)
    smoother=regionClassifier.hmmFilter(winSize,nGens=nGens,nClasses=len(subjects)-1)

    nTrain=np.sum(map(len, subjects[:-1]))  #Number of samples in training set
    nTest=len(subjects[-1]); #Number of admixed samples
    labelsTrain =sum([[i]*len(sub) for i, sub in enumerate(subjects[:-1])],[])
    fileDone=False
    while True:   #Keep on reading file
        vals=[]
        while len(vals)<winSize:  #Keep reading file until window filled.
            try: (snpInfo, snps) = files.next()
            except StopIteration: fileDone=True; break
            if params['isBeagle']:
                snpNames.append(snpInfo[0])
                snpLocations.append(float(snpInfo[1]))
                vals.append(fileReader.nucleotides2Haplotypes(sum(snps, []), False))
            else:
                if snpInfo[0]<chrom:  continue  #Read past earlier chromosomes
                elif snpInfo[0]>chrom: fileDone=True; break  #Finnished when read past chrom
                elif snpInfo[0]==chrom:
                    snpNames.append(snpInfo[1])
                    mapLocations.append(float(snpInfo[2]))
                    snpLocations.append(float(snpInfo[3]))
                    vals.append(fileReader.nucleotides2Haplotypes(sum(snps, []), False))
        vals=np.asarray(vals).T
        if len(vals)==0: break #No SNPs in window
        ancestral, admixed=classifier(vals[:nTrain], labelsTrain, vals[-nTest:])
        ancestralSuccess.append(ancestral)
        admixedClass.append(admixed)
        if fileDone: break
    if len(admixedClass)==0: supportConfig.fail('No SNPs found in specified chromosome')

    #Extract genetic map if supplied as file
    if params['mapDir']!=None:  #Use mapFiles to determine genetic map
        mapFile=supportConfig.createDataPath(params['mapDir'])
        
        print "Genetic Map Directory:",mapFile
        if not os.path.isdir(mapFile):
            supportConfig.fail('Can not find genetic map directory: [%s]\n Please provide the full path to the genetic map directory.'%mapFile)

        mapFile=glob.glob('%s/*_chr%s_*' %(mapFile, chrom))
        if len(mapFile)!=1:
            supportConfig.fail('genetic map folder contains too few or to many files with pattern: *_chr%s_*, %i found.' %(chrom, len(mapFile)))
        mapFile=mapFile[0]
        try:
            gm=popgen.geneticMap(mapFile)
            mapLocations=gm.pos2gm(snpLocations)
        except:
            supportConfig.fail('The genetic map file %s does not conform to correct format.  There should be three columns with one header row of labels.' %mapFile)
    #Verify that the map supplied is correct
    if len(mapLocations)!=len(snpLocations):
        supportConfig.fail('No genetic map coordinates were given')
    avgGM=(np.max(mapLocations)-np.min(mapLocations))/(snpLocations[-1]-snpLocations[0])*1e6
    if avgGM < 0.01:
        supportConfig.warn('The genetic map distances are VERY small at %0.2g cM/Mb!!!' % avgGM)
    if avgGM > 10:
        supportConfig.warn('The genetic map distances are VERY LARGE at %0.2g cM/Mb!!!' % avgGM)

    #Do second level filtering with HMM
    admixedClassPre=np.array(admixedClass)
    admixedClass, p=smoother(mapLocations, ancestralSuccess, admixedClassPre)
    return subjects[-1], snpNames, snpLocations, mapLocations,  admixedClassPre, admixedClass, p, chrom


def accuracySummary(params, results):
    """If given a file with the correct classifications calculates the accuracy

    Arguments:
    - `params`: contains the options used to run the sample including
          - `correctFile`: File name of correct classification
          - `saveFile`: File name for admixed output
    """
    pCutoffs=[.99 , .9, .8]
    winSize=params['win']
    #Read correct classifications
    correct=np.loadtxt(params['correctFile'], dtype=np.str)
    correctChroms=correct[:,0]
    correctRsIds=correct[:,1]
    correctMapPos=correct[:,2]
    correctBpPos=correct[:,3]
    correct=correct[:,4:].astype(np.int)
    #Go through all classified chromosomes and compare
    totalCorrect=np.zeros((1, correct.shape[1]))
    totalN=np.zeros((1, correct.shape[1]))
    totalCorrectPCut=np.zeros(len(pCutoffs))
    totalNPCut=np.zeros(len(pCutoffs))
    for  subs, snpNames, snpLocs, mapLocs, admixedClassPre, admixedClass,p,chrom in results:
        chromIdx=np.nonzero(correctChroms==chrom)[0]
        if len(chromIdx)==0: supportConfig.fail('--ancestryFile parameter does not match any positions in data.  Was the right chromosome specified?')
        idx=chromIdx[(correctRsIds[chromIdx]==snpNames)]
        admixed=np.repeat(admixedClass, winSize, axis=0)[:len(idx),:]  #make admixed right size
        pVals=np.repeat(p, winSize, axis=0)[:len(idx),:]               #make p values right size
        totalCorrect+=np.sum(correct[idx, :]==admixed, 0)
        totalN+=np.sum(pVals>0, 0)
        for i, pCut in enumerate(pCutoffs):
            pIdx=pVals>=pCut
            totalCorrectPCut[i]+=np.sum(correct[idx, :][pIdx]==admixed[pIdx])
            totalNPCut[i]+=np.sum(pIdx)

    sys.stdout.write('Correct %0.3g+/-%0.3g\t ('  %(100*np.mean(totalCorrect/totalN), 100*np.std(totalCorrect/totalN)))
    for i, pCut in enumerate(pCutoffs):
        sys.stdout.write(' p>%0.2g(N=%0.2g%%): %0.3g ' % (pCut, 100*totalNPCut[i]/float(totalN.sum()), 100*totalCorrectPCut[i]/float(totalNPCut[i])))
    sys.stdout.write(')\n')
    return 100*np.mean(totalCorrect/totalN), 100*np.std(totalCorrect/totalN)

def saveFiles(params, results):
    """Saves two tped files and a tfam file of the ancestry classifications

    Arguments:
    - `params`: contains the options used to run the sample
    - `results`: is a list of tuples each containing :
          - `subjects`:list of subjects
          - `snpNames`:list of rsIds
          - `snpLocs`: list of positions of rsIds
          - `mapLocs`: list of genetic map locations
          - `admixedClassPre`: matrix of classifications before hmm filtering
          - `admixedClass`: matrix of classifications
          - `p`: matrix of posterior probabiltity for each classified loci
          - `chrom`: chromsome name
    """
    #save tfam file
    admixedClass=results[0][5]
    subjects=results[0][0]
    nSubs=admixedClass.shape[1]
    with open(params['saveFile']+".tfam","w") as tFamFp:
        pedPadding="0 %s 0 0 0 0 0"
        for subject in subjects[::2]:
            tFamFp.write("%s\n"%pedPadding%subject.replace('_a', ''))
    #Open tped files for saving results
    tPedFp=open(params['saveFile']+".tped","w")
    tPedProbFp=open(params['saveFile']+".Probs.tped","w")
    fpPos=open(params['saveFile']+".positions.txt","w")
    fpPos.write('start rsID\tend rsId\tstart pos[bp]\tend pos[bp]\n')
    nWin=params['win']
    for subs, snpNames, snpLocs, mapLocs, admixedClassPre, admixedClass,p,chrom in results:
        for i, (rsId, rsPos, rsMap) in enumerate(zip(snpNames[::nWin], snpLocs[::nWin], mapLocs[::nWin])):
            tPedFp.write('%s %s %0.4g %i' %(chrom, rsId, rsMap, rsPos))
            tPedFp.write(' %i'*nSubs %tuple(admixedClass[i, :]))
            tPedFp.write('\n')
            tPedProbFp.write('%s %s %0.4g %i' %(chrom, rsId, rsMap, rsPos))
            tPedProbFp.write(' %0.3g'*nSubs %tuple(p[i, :]))
            tPedProbFp.write('\n')
        for i in range(0, len(snpLocs), nWin): #Write out a position file
            endI=min(i+nWin-1, len(snpLocs)-1)
            fpPos.write('%s\t%s\t%i\t%i\n' %(snpNames[i], snpNames[endI], snpLocs[i], snpLocs[endI]))
    tPedFp.close()
    tPedProbFp.close()
    fpPos.close()
    #Write out a legend file
    with open(params['saveFile']+".population_legend.txt","w") as fp:
        fp.write('Label\tPopulation origin\n')
        for i, name in enumerate(params['fileNames'][:-1]):
            fp.write('%i\t%s\n' %(i, name))
    sys.stdout.write('Output written to: %s.*\n' % params['saveFile'])


def summarizeResults(params, results):
    """Counts the percentage of loci assigned to each population and outpust to stdout

    Arguments:
    - `params`: contains the options used to run the sample
    - `results`: List of results per chromosome
    """
    pops=[os.path.split(pop)[-1] for pop in  params['fileNames'][:-1]]
    for i, pop in enumerate(pops):
        nPop=0; nTot=0.
        for  subs, snpNames, snpLocs, mapLocs, admixedClassPre, admixedClass,p,chrom in results:
            nPop+=np.sum(admixedClass.ravel()==i)
            nTot+=admixedClass.size
        sys.stdout.write('Population %s has: %2.2g%% loci assigned\n' %(pop, 100*nPop/nTot))


def plotResults(params, results, imageFile=None):
    """Generates graphics output

    Arguments:
    - `params`: contains the options used to run the sample
    - `results`: is a list of tuples each containing :
          - `subjects`:list of subjects
          - `snpNames`:list of rsIds
          - `snpLocs`: list of positions of rsIds
          - `mapLocs`: list of genetic map locations
          - `admixedClassPre`: matrix of classifications before hmm filtering
          - `admixedClass`: matrix of classifications
          - `p`: matrix of posterior probabiltity for each classified loci
          - `chrom`: chromsome name
    """
    nColors=len(params['fileNames'])-1
    if not params['rgb']:
        params['rgb']=[pylab.cm.jet(i/(nColors-1.)*256) for i in range(nColors)]
    if not params['labels']:
        params['labels']=[os.path.split(l)[-1] for l in params['fileNames'][:-1]]

    pylab.figure()
    nTotWin=float(np.sum([result[5].shape[0] for result in results]))*1.2
    xStart=.1; xSpace=.015; xWidth=.85-xSpace*(len(results)-1)
    for subs, snpNames, snpLocs, mapLocs, admixedClassPre, admixedClass,p,chrom in results:
        #Convert classifications to colors
        imColors=np.zeros((admixedClass.shape[1],admixedClass.shape[0],4))
        nWins, nSubs=admixedClass.shape
        for i in range(nWins):
            for j in range(nSubs):
                imColors[j,i,:]=params['rgb'][int(admixedClass[i,j])]
        #Plot classificiations
        xDelta=admixedClass.shape[0]/nTotWin
        print xStart, xWidth*xDelta
        ax=pylab.axes([xStart, .1,  xWidth*xDelta, .8])
        pylab.imshow(imColors, interpolation='nearest')
        pylab.axis('tight')
        if xStart==.1:
            pylab.yticks(range(len(subs)), subs)
        else:
            pylab.yticks([])
        xStart+=xDelta*xWidth+xSpace

        pylab.ylim(-.5, len(subs)-.5)
        pos, labels=pylab.xticks()
        labels=np.round(np.asarray(snpLocs[::len(snpLocs)/(len(labels)-3)])/1e6)
        pylab.xticks(pos[1:-1], labels.astype(np.int))
        pylab.xlabel('Position [Mb]')
        pylab.title('chrom %s' %chrom)
        pylab.axes([.85, .1, .13, .85])
        y=0
        for i, label in enumerate(params['labels']):
            pylab.scatter(0,y, s=40, c=params['rgb'][i], linewidth=0)
            pylab.text(0+.5, y, label, fontsize=8, verticalalignment='center')
            y+=1;
        pylab.axis([-0.5, 8, -.3, len(params['labels'])-.5])
    pylab.axis('off')
    if imageFile:
        pylab.savefig(imageFile)
    else:
        pylab.show()



if __name__ == '__main__':
    if DEBUG: supportConfig.DEBUG=True
    rawConfiguration={}
    params=supportConfig.getParameters(rawConfiguration)
    if DEBUG:
        print "CmdLine Options Parameters",params
        print "Running SVM with the following options",params['fileNames'], params['nGens'], params['win'], params['chrom']

    results=map(lambda chrom: runSVM(params, chrom), params['chrom'])
    saveFiles(params, results)
    summarizeResults(params, results)
    bp, gm=winSizeBPandCM(results, params['win'])

    sys.stdout.write('Mean window size: %i+/-%i bp, %2.2g+/-%2.2g cM\n' %(np.mean(bp), np.std(bp), np.mean(gm), np.std(gm)))
    try:
        if params['correctFile']:
            mean, std=accuracySummary(params, results)
    except:
        supportConfig.fail('Error in determining accuracy.  Please verify format of %s' %params['correctFile'])
    if params['doPlot']: plotResults(params, results, params['saveFile']+'.png')
    supportConfig.writeConfigFile(rawConfiguration,params['saveFile']+'.cfg')



